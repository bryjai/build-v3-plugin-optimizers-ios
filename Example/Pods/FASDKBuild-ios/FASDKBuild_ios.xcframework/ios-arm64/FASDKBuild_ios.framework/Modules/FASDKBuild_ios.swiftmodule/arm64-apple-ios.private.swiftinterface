// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FASDKBuild_ios
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CommonCrypto
import CryptoKit
@_exported import FASDKBuild_ios
import Foundation
import LocalAuthentication
import MessageUI
import MobileCoreServices
import Network
import SafariServices
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public enum FADeepLinkFailedReason : Swift.String {
  case UrlHostIsNull
  case UrlComponentIsNull
  case NoMatchToFindASectionMatchingHost
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol FADeeplinkDelegate : AnyObject {
  func deeplinkCanBeConsumedNow(url: Foundation.URL, by sectionViewController: FASDKBuild_ios.FASectionViewController) -> Swift.Bool
  func deeplinkRejected(url: Foundation.URL, reason: FASDKBuild_ios.FADeepLinkFailedReason)
}
extension Foundation.URL {
  public func isAboutBlank() -> Swift.Bool
  public func mimeType() -> Swift.String
  public func withoutQuery() -> Foundation.URL?
}
extension Swift.String {
  public func color() -> UIKit.UIColor?
}
@_hasMissingDesignatedInitializers public class FAReadOnlyStyle {
  public func globalBackgroundColor() -> UIKit.UIColor?
  public func tabbarBackgroundColor() -> UIKit.UIColor?
  public func tabbarSelectedColor() -> UIKit.UIColor?
  public func tabbarUnselectedColor() -> UIKit.UIColor?
  public func navbarBackgroundColor() -> UIKit.UIColor?
  public func navbarTitleColor() -> UIKit.UIColor?
  public func navbarButtonColor() -> UIKit.UIColor?
  public func tabBarBadgeColor() -> UIKit.UIColor?
  public func navbarCartButtonTextColor() -> UIKit.UIColor?
  public func sideMenuItemTextColor() -> UIKit.UIColor?
  public func sideMenuDividerColor() -> UIKit.UIColor?
  public func sideMenuBackgroundColor() -> UIKit.UIColor?
  @objc deinit
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func addJavascriptSourceInjection(source: Swift.String, identifier: Swift.String? = nil, forMainFrameOnly: Swift.Bool = true, injectionTime: WebKit.WKUserScriptInjectionTime = .atDocumentStart)
  @_Concurrency.MainActor(unsafe) public func addJavascriptSourceInjectionIfNeeded(source: Swift.String, identifier: Swift.String? = nil, forMainFrameOnly: Swift.Bool = true, injectionTime: WebKit.WKUserScriptInjectionTime = .atDocumentStart)
  @_Concurrency.MainActor(unsafe) public func removeJavascriptSourceInjection(source: Swift.String)
  @_Concurrency.MainActor(unsafe) public func removeJavascriptSourceInjection(identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public func removeAllJavascriptSourceInjections(source: Swift.String)
  @_Concurrency.MainActor(unsafe) public func isJavascriptSourceInjectionAlreadyAdded(source: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FANavigationController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public func setNavigationBarBackgroundColor(color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) public func setNavigationBarTintColor(color: UIKit.UIColor)
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FAAnimatableSplashView : UIKit.UIView, FASDKBuild_ios.FALoadableSplashView, FASDKBuild_ios.FAAnimatableSplash {
  @_Concurrency.MainActor(unsafe) open func startLoading()
  @_Concurrency.MainActor(unsafe) open func animateRemoval(completion: @escaping (() -> Swift.Void))
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension FASDKBuild_ios.FABuilder {
  open func handleDeepLink(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:], allowAllHosts: Swift.Bool = false) -> Swift.Bool
  open func asyncHandleDeepLink(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:], allowAllHosts: Swift.Bool = false)
  open func waitingDeepLink() -> Foundation.URL?
  open func resetDeepLink()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FAWebViewConfiguration : WebKit.WKWebViewConfiguration {
  @objc override dynamic public init()
  @objc deinit
}
public func FALocalizedString(_ key: Swift.String, defaultValue: Swift.String) -> Swift.String
open class FABasePlugin {
  weak public var sectionLifeCycleDelegate: (any FASDKBuild_ios.FAPluginSectionViewControllerLifeCycleDelegate)?
  weak public var sectionWebViewNavigationDelegate: (any FASDKBuild_ios.FAPluginSectionWebViewNavigationDelegate)?
  weak public var storageDelegate: (any FASDKBuild_ios.FAPluginStorageDelegate)?
  weak public var builderLifeCycleDelegate: (any FASDKBuild_ios.FAPluginBuilderLifeCycleDelegate)?
  weak public var builderDelegate: (any FASDKBuild_ios.FAPluginBuilderDelegate)?
  public init()
  @objc deinit
}
public protocol FAAnimatableSplash {
  func animateRemoval(completion: @escaping (() -> Swift.Void))
}
public protocol FAReachabilityDelegate : AnyObject {
  func networkReachabilityBecomeReachable()
  func networkReachabilityBecomeUnreachable()
}
@_hasMissingDesignatedInitializers public class FAReachabilityManager {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 12.0, *)
public class FADynamicReachabilityManager : FASDKBuild_ios.FAReachabilityManager {
  public static let shared: FASDKBuild_ios.FADynamicReachabilityManager
  public func networkIsReachable() -> Swift.Bool
  @objc deinit
}
extension UIKit.UIImage {
  convenience public init?(color: UIKit.UIColor, size: CoreFoundation.CGSize = CGSize(width: 1, height: 1))
}
@objc @_inheritsConvenienceInitializers public class FAFileManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public protocol FAPluginSectionWebViewNavigationDelegate : AnyObject {
  func sectionViewControllerDidStart(navigation: WebKit.WKNavigation!, sectionViewController: FASDKBuild_ios.FASectionViewController)
  func sectionViewControllerDidFinish(navigation: WebKit.WKNavigation!, sectionViewController: FASDKBuild_ios.FASectionViewController)
  func sectionViewControllerDecidePolicyFor(navigationAction: WebKit.WKNavigationAction, sectionViewController: FASDKBuild_ios.FASectionViewController) -> (actionPolicy: WebKit.WKNavigationActionPolicy, urlToLoad: Foundation.URL?)
  func sectionViewControllerDecidePolicyFor(navigationResponse: WebKit.WKNavigationResponse, sectionViewController: FASDKBuild_ios.FASectionViewController) -> WebKit.WKNavigationResponsePolicy
  func sectionViewControllerDidReceive(challenge: Foundation.URLAuthenticationChallenge, sectionViewController: FASDKBuild_ios.FASectionViewController) -> Foundation.URLSession.AuthChallengeDisposition
}
extension FASDKBuild_ios.FAPluginSectionWebViewNavigationDelegate {
  public func sectionViewControllerDidStart(navigation: WebKit.WKNavigation!, sectionViewController: FASDKBuild_ios.FASectionViewController)
  public func sectionViewControllerDidFinish(navigation: WebKit.WKNavigation!, sectionViewController: FASDKBuild_ios.FASectionViewController)
  public func sectionViewControllerDecidePolicyFor(navigationAction: WebKit.WKNavigationAction, sectionViewController: FASDKBuild_ios.FASectionViewController) -> (actionPolicy: WebKit.WKNavigationActionPolicy, urlToLoad: Foundation.URL?)
  public func sectionViewControllerDecidePolicyFor(navigationResponse: WebKit.WKNavigationResponse, sectionViewController: FASDKBuild_ios.FASectionViewController) -> WebKit.WKNavigationResponsePolicy
  public func sectionViewControllerDidReceive(challenge: Foundation.URLAuthenticationChallenge, sectionViewController: FASDKBuild_ios.FASectionViewController) -> Foundation.URLSession.AuthChallengeDisposition
}
public protocol FAPluginStorageDelegate : AnyObject {
  func willStoreCookies(_ cookies: [Foundation.HTTPCookie], manager: FASDKBuild_ios.FAStorageManager) -> [Foundation.HTTPCookie]
  func willApplyStoredCookies(_ cookies: [Foundation.HTTPCookie], manager: FASDKBuild_ios.FAStorageManager) -> [Foundation.HTTPCookie]
}
extension Swift.String {
  public func md5Hex() -> Swift.String
}
public protocol FAPluginBuilderLifeCycleDelegate : AnyObject {
  func builderWillStart()
  func builderDidStart()
  func builderRemoveSplashView()
}
extension FASDKBuild_ios.FAPluginBuilderLifeCycleDelegate {
  public func builderWillStart()
  public func builderDidStart()
  public func builderRemoveSplashView()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FANavigationSectionViewController : FASDKBuild_ios.FANavigationController {
  @_Concurrency.MainActor(unsafe) public func showContent(forUrl: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func pushContent(forUrl: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func sectionViewController() -> FASDKBuild_ios.FASectionViewController?
  @_Concurrency.MainActor(unsafe) public func topSectionViewController() -> FASDKBuild_ios.FASectionViewController?
  @available(iOS 5.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func blockBlackListedResources(blackListedResources: [Swift.String])
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class FABaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func isNavigationStarted() -> Swift.Bool
}
extension FASDKBuild_ios.FABuilder {
  open var userAgent: Swift.String {
    get
    set
  }
  open var rootViewController: UIKit.UIViewController? {
    get
  }
  weak open var tabBarController: FASDKBuild_ios.FATabBarController? {
    get
  }
  open var sectionControllers: [FASDKBuild_ios.FANavigationSectionViewController] {
    get
  }
  open var currentUser: Swift.String? {
    get
  }
  open var loggedInStatus: FASDKBuild_ios.FAAuthStatus {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FATabBarController : UIKit.UITabBarController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func setupViewControllers() -> [FASDKBuild_ios.FANavigationSectionViewController]
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension FASDKBuild_ios.FATabBarController : FASDKBuild_ios.FAInitialLoadingDelegate {
  @_Concurrency.MainActor(unsafe) public func shouldStartLoading()
  @_Concurrency.MainActor(unsafe) public func shouldEndLoading()
}
extension FASDKBuild_ios.FATabBarController : FASDKBuild_ios.FAViewComposerDelegate {
  @_Concurrency.MainActor(unsafe) public func compose(mail url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func compose(message url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func compose(external url: Foundation.URL, preventZooming: Swift.Bool, configuration: WebKit.WKWebViewConfiguration) -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) public func compose(safariVC url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func showFaceIDView(username: Swift.String)
  @_Concurrency.MainActor(unsafe) public func hideFaceIDView()
}
extension FASDKBuild_ios.FATabBarController : FASDKBuild_ios.FATabBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
}
public protocol FATabBarDelegate : UIKit.UITabBarControllerDelegate {
  func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
}
extension FASDKBuild_ios.FATabBarDelegate {
  public func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  public func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
}
extension FASDKBuild_ios.FATabBarController {
  @_Concurrency.MainActor(unsafe) public func selectedSectionViewController() -> FASDKBuild_ios.FASectionViewController?
  @_Concurrency.MainActor(unsafe) public func setTabBarVisible(_ visible: Swift.Bool, animation duration: Foundation.TimeInterval = 0.3)
}
public protocol FAInactivityTrackerDelegate : AnyObject {
  func shouldStartInactivityTimer(tracker: FASDKBuild_ios.FAInactivityTracker) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class FAInactivityTracker : ObjectiveC.NSObject {
  public static let shared: FASDKBuild_ios.FAInactivityTracker
  public func startInactivityTimer()
  public func stopInactivityTimer()
  public func restartInactivityTimer()
  @objc override dynamic public init()
  @objc deinit
}
public enum FABuildDebugFlag : Swift.String {
  case splashScreenTransparency
  case clearCookiesOnStart
  case clearCookiesOnBackground
  case toastMajorEvents
  case allowWebviewsInspection
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class FABuilderRuntimeStartParameters {
  public var timeToCompletePersistentLogin: Swift.Double?
  public var timeToDelayStartPersistentLogin: Swift.Double?
  public var forceSessionCheckOnBackToForeground: Swift.Bool
  public var verbose: Swift.Bool?
  public var maxStartDuration: Swift.Double
  public var timeIntervalCheckInactivity: Swift.Int
  public var minWebViewLoadingProgressBeforeEvaluatingJS: Swift.Double
  public var debug_flags: [FASDKBuild_ios.FABuildDebugFlag]
  public var flag_performances_DOM_update_auto_lazzyload: Swift.Bool
  public var flag_beta_webviews_stack: Swift.Bool
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class FABuilderAppStartWithFileModel : FASDKBuild_ios.FABuilderAppStartModel {
  public var localFileUrl: Foundation.URL!
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers public class FABuilderAppStartWithJSONModel : FASDKBuild_ios.FABuilderAppStartModel {
  public var configObject: [Swift.String : Any]!
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FABuilderAppStartModel {
  public var runtimeParameters: FASDKBuild_ios.FABuilderRuntimeStartParameters?
  weak public var builderDelegate: (any FASDKBuild_ios.FABuilderDelegate)?
  weak public var sectionLifeCycleDelegate: (any FASDKBuild_ios.FASectionViewControllerLifeCycleDelegate)?
  weak public var sectionWebViewNavigationDelegate: (any FASDKBuild_ios.FASectionWebViewNavigationDelegate)?
  weak public var sectionUIDelegate: (any FASDKBuild_ios.FASectionViewControllerDelegate)?
  weak public var externalWebViewDelegate: (any FASDKBuild_ios.FAExternalWebViewNavigationDelegate)?
  weak public var inactivityDelegate: (any FASDKBuild_ios.FAInactivityTrackerDelegate)?
  weak public var deeplinkDelegate: (any FASDKBuild_ios.FADeeplinkDelegate)?
  weak public var reachabilityDelegate: (any FASDKBuild_ios.FAReachabilityDelegate)?
  weak public var keychainDelegate: (any FASDKBuild_ios.FAKeychainDelegate)?
  public var plugins: [FASDKBuild_ios.FABasePlugin]
  @objc deinit
}
extension Swift.String {
  public func isAboutBlank() -> Swift.Bool
}
extension FASDKBuild_ios.FABuilder {
  public func activeSectionViewController() -> FASDKBuild_ios.FASectionViewController?
  public func findSectionViewController(forWebView webView: WebKit.WKWebView) -> FASDKBuild_ios.FASectionViewController?
  public func topVisibleViewController(ignoreAlertViewController: Swift.Bool = true) -> UIKit.UIViewController?
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public func topVisibleViewController(ignoreAlertViewController: Swift.Bool = true) -> UIKit.UIViewController?
}
public enum FASectionViewControllerType {
  case webGenericSection
  case webGenericTransientSection
  case webLoginPageSection
  case webForceLoginPageSection
  case unknownSection
  public static func == (a: FASDKBuild_ios.FASectionViewControllerType, b: FASDKBuild_ios.FASectionViewControllerType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension FASDKBuild_ios.FASectionViewController {
  @_Concurrency.MainActor(unsafe) public func sectionType() -> FASDKBuild_ios.FASectionViewControllerType
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FASectionViewController : FASDKBuild_ios.FABaseViewController {
  @_Concurrency.MainActor(unsafe) public func webView() -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func loadInitialUrl(eraseHistory: Swift.Bool = false, ignoreQueryParams: Swift.Bool = false)
  @_Concurrency.MainActor(unsafe) public func resetWebView()
  @_Concurrency.MainActor(unsafe) public func scrollToTop()
  @_Concurrency.MainActor(unsafe) public func load(url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension FASDKBuild_ios.FASectionViewController : FASDKBuild_ios.FASectionViewDelegate {
  @_Concurrency.MainActor(unsafe) public func currentWebViewProgress() -> Swift.Double
  @_Concurrency.MainActor(unsafe) public func refreshTabs()
  @_Concurrency.MainActor(unsafe) public func reload()
  @_Concurrency.MainActor(unsafe) public func isAHostIsLoaded() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func showFaceIDScreen(username: Swift.String)
  @_Concurrency.MainActor(unsafe) public func hideFaceIDScreen()
  @_Concurrency.MainActor(unsafe) public func loadURL(_ url: Foundation.URL)
  @_Concurrency.MainActor(unsafe) public func tabIndex() -> Swift.Int?
}
extension FASDKBuild_ios.FASectionViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension FASDKBuild_ios.FASectionViewController {
  @_Concurrency.MainActor(unsafe) public func registerScriptMessageHandler(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func webViewExists() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func setPreventEnableZooming(_ preventEnableZooming: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func resetPreventEnableZooming()
  @_Concurrency.MainActor(unsafe) public func setCustomViewport(_ viewport: FASDKBuild_ios.FAViewPort)
  @_Concurrency.MainActor(unsafe) public func setNavigationTitle(_ title: Swift.String)
  @_Concurrency.MainActor(unsafe) public func resetNavigationBarTitle()
  @_Concurrency.MainActor(unsafe) public func setNavigationBarTitleFont(_ font: UIKit.UIFont)
  @_Concurrency.MainActor(unsafe) public func setTabBarFont(_ font: UIKit.UIFont)
  @_Concurrency.MainActor(unsafe) public func setCartFont(_ font: UIKit.UIFont)
  @_Concurrency.MainActor(unsafe) public func changeSectionURL(_ url: Swift.String)
  @_Concurrency.MainActor(unsafe) public func registerNativeInterfaces()
  @_Concurrency.MainActor(unsafe) public func resetSectionURL()
  @_Concurrency.MainActor(unsafe) public func webViewUserContentControllerAdd(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func evaluateJavaScript(js: Swift.String, completionHandler: ((Any?, (any Swift.Error)?) -> Swift.Void)? = nil)
  @_Concurrency.MainActor(unsafe) public func addRefreshControl()
  @_Concurrency.MainActor(unsafe) public func removeRefreshControl()
  @_Concurrency.MainActor(unsafe) public func isLoginInProgress() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func isNativeSection() -> Swift.Bool
}
extension FASDKBuild_ios.FASectionViewController {
  @_Concurrency.MainActor(unsafe) public func clone() -> FASDKBuild_ios.FASectionViewController
}
extension FASDKBuild_ios.FASectionViewController {
  @_Concurrency.MainActor(unsafe) public var cartCounter: Swift.Int {
    get
    set
  }
}
public protocol FASectionDelegate : FASDKBuild_ios.FASectionViewDelegate, FASDKBuild_ios.FAWebViewEvaluatorDelegate, FASDKBuild_ios.FAWebViewUIDelegate {
}
public protocol FASectionViewDelegate : AnyObject {
  func refreshTabs()
  func showFaceIDScreen(username: Swift.String)
  func hideFaceIDScreen()
  func loadURL(_ url: Foundation.URL)
  func currentWebViewProgress() -> Swift.Double
  func tabIndex() -> Swift.Int?
}
public protocol FAWebViewEvaluatorDelegate : AnyObject {
  func canEvaluateLoginState() -> Swift.Bool
  func evaluateJavaScript(_ script: Swift.String)
  func evaluateJavaScript(_ script: Swift.String, completionHandler: @escaping (Any?, (any Swift.Error)?) -> Swift.Void)
  func webViewUserContentControllerAdd(_ script: WebKit.WKUserScript)
  func webViewUserContentControllerAdd(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, name: Swift.String)
  func loadRequest(url: Foundation.URL)
  func goBack()
}
public protocol FAWebViewUIDelegate : AnyObject {
  func isWebViewLoading() -> Swift.Bool
  func webViewWindow() -> UIKit.UIWindow?
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FAExternalWebViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(url: Foundation.URL, preventZooming: Swift.Bool, configuration: FASDKBuild_ios.FAWebViewConfiguration, externalWebViewDelegate: any FASDKBuild_ios.FAExternalWebViewNavigationDelegate)
  @objc deinit
}
public protocol FAActivityIndicatable {
  func startActivityIndicator()
  func isActivityIndicatorAnimating() -> Swift.Bool
  func stopActivityIndicator(completion: @escaping (() -> Swift.Void))
}
@objc extension UIKit.UIViewController : FASDKBuild_ios.FAActivityIndicatable {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func startActivityIndicator()
  @objc @_Concurrency.MainActor(unsafe) dynamic public func isActivityIndicatorAnimating() -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func stopActivityIndicator(completion: @escaping (() -> Swift.Void))
}
extension UIKit.UIColor {
  convenience public init(hexString: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  public func toHexString() -> Swift.String
}
@_hasMissingDesignatedInitializers public class Log {
  @objc deinit
}
extension FASDKBuild_ios.FASectionViewController {
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func webViewWebContentProcessDidTerminate(_ webView: WebKit.WKWebView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func webView(_ webView: WebKit.WKWebView, didCommit navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) public func webViewWebContentGoBack(webView: WebKit.WKWebView)
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func addCSSFileInjectionIfNeeded(resource: Swift.String, forMainFrameOnly: Swift.Bool = true, bundle: Foundation.Bundle = Bundle.main)
  @_Concurrency.MainActor(unsafe) public func addCSSFileInjection(resource: Swift.String, forMainFrameOnly: Swift.Bool = true, bundle: Foundation.Bundle = Bundle.main)
}
public protocol FASectionViewControllerLifeCycleDelegate : AnyObject {
  func webViewWillBeInitializedUsingConfiguration(sectionViewController: FASDKBuild_ios.FASectionViewController, configuration: WebKit.WKWebViewConfiguration)
  func webViewInitialized(sectionViewController: FASDKBuild_ios.FASectionViewController)
}
extension FASDKBuild_ios.FASectionViewControllerLifeCycleDelegate {
  public func webViewWillBeInitializedUsingConfiguration(sectionViewController: FASDKBuild_ios.FASectionViewController, configuration: WebKit.WKWebViewConfiguration)
  public func webViewInitialized(sectionViewController: FASDKBuild_ios.FASectionViewController)
}
public protocol FABuilderDelegate : AnyObject {
  func didUpdateConfiguration()
  func didUpdateRootViewContoller()
  func didLoginSuccess()
  func didLogout()
  func didLoginError()
  func didAuthenticateUsingBiometrics()
  func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
  func customSplashView() -> FASDKBuild_ios.FAAnimatableSplashView?
  func customWebViewLoaderView() -> FASDKBuild_ios.FAAnimatableLoadingView?
  func injectLocalJavascriptResources() -> [Swift.String]
  func injectLocalCSSResources() -> [Swift.String]
}
extension FASDKBuild_ios.FABuilderDelegate {
  public func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  public func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
  public func didAuthenticateUsingBiometrics()
  public func didLogout()
  public func didLoginSuccess()
  public func didLoginError()
}
public enum FABuilderState : Swift.String {
  case started
  case presentingForceLogin
  case persistantLoginInProgress
  case sessionRestorationInProcess
  case splashViewVisible
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FABuilder : ObjectiveC.NSObject {
  public static let shared: FASDKBuild_ios.FABuilder
  public var customURLSchemeHandlers: [Swift.String : any WebKit.WKURLSchemeHandler]
  public func start(with jsonModel: FASDKBuild_ios.FABuilderAppStartWithJSONModel)
  public func start(with configURL: Foundation.URL)
  public func start(with fileModel: FASDKBuild_ios.FABuilderAppStartWithFileModel)
  public func configurationCustomValue(forKey: Swift.String) -> Swift.AnyObject?
  public func configurationStyle() -> FASDKBuild_ios.FAReadOnlyStyle?
  public func promptBiometricsIfPossible()
  public func computedStates() -> [FASDKBuild_ios.FABuilderState]
  public func async_validate()
  @objc deinit
}
extension FASDKBuild_ios.FABuilder : FASDKBuild_ios.FATabBarDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
}
public protocol FASectionViewControllerDelegate : AnyObject {
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, watchChangesOn webView: WebKit.WKWebView?)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, edit scannedBarcode: Swift.String) -> Swift.String
  func sectionViewControllerShouldHandleBarcode(_ controller: FASDKBuild_ios.FASectionViewController) -> Swift.Bool
  func sectionViewControllerWillPresentBarcodeScannerController(_ controller: FASDKBuild_ios.FASectionViewController, barcodeScannerViewController: UIKit.UIViewController)
  func sectionViewControllerShouldDetectMachineReadableCodes(_ controller: FASDKBuild_ios.FASectionViewController) -> [AVFoundation.AVMetadataObject.ObjectType]!
  func sectionViewControllerDidTapNavigationBarTitle(_ controller: FASDKBuild_ios.FASectionViewController)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didTapNavigationBarButtonWith identifier: Swift.String?)
}
extension FASDKBuild_ios.FASectionViewControllerDelegate {
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, watchChangesOn webView: WebKit.WKWebView?)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, edit scannedBarcode: Swift.String) -> Swift.String
  public func sectionViewControllerShouldHandleBarcode(_ controller: FASDKBuild_ios.FASectionViewController) -> Swift.Bool
  public func sectionViewControllerShouldDetectMachineReadableCodes(_ controller: FASDKBuild_ios.FASectionViewController) -> [AVFoundation.AVMetadataObject.ObjectType]!
  public func sectionViewControllerWillPresentBarcodeScannerController(_ controller: FASDKBuild_ios.FASectionViewController, barcodeScannerViewController: UIKit.UIViewController)
  public func sectionViewControllerDidTapNavigationBarTitle(_ controller: FASDKBuild_ios.FASectionViewController)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didTapNavigationBarButtonWith identifier: Swift.String?)
}
@objc public class FAUserScript : WebKit.WKUserScript {
  public init(source: Swift.String, identifier: Swift.String?, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool)
  @objc override dynamic public init(source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool)
  @available(iOS 14.0, *)
  @objc override dynamic public init(source: Swift.String, injectionTime: WebKit.WKUserScriptInjectionTime, forMainFrameOnly: Swift.Bool, in contentWorld: WebKit.WKContentWorld)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func getInjections() -> [WebKit.WKUserScript]
  @_Concurrency.MainActor(unsafe) public func userScript(identifier: Swift.String) -> WebKit.WKUserScript?
  @_Concurrency.MainActor(unsafe) public func removeUserScript(identifier: Swift.String)
  @_Concurrency.MainActor(unsafe) public func removeUserScripts(identifier: Swift.String)
}
public protocol FAPluginBuilderDelegate : AnyObject {
  func builderDidLoginSuccess()
  func builderDidLogout()
}
extension FASDKBuild_ios.FAPluginBuilderDelegate {
  public func builderDidLoginSuccess()
  public func builderDidLogout()
}
public struct FACredentials {
}
extension FASDKBuild_ios.FAKeychainManager {
  public func clearCredentials(andRefreshViews: Swift.Bool = false)
  public func clearCredentials(host: Swift.String, andRefreshViews: Swift.Bool = false)
  public func readCredentials(of server: Swift.String) -> FASDKBuild_ios.FACredentials?
}
public protocol FAKeychainDelegate : AnyObject {
  func credentialsStoredBy(keychainManager: FASDKBuild_ios.FAKeychainManager, server: Swift.String)
  func usernameSavedInMemoryBy(keychainManager: FASDKBuild_ios.FAKeychainManager)
  func passwordSavedInMemoryBy(keychainManager: FASDKBuild_ios.FAKeychainManager)
  func credentialsSavedInMemoryBy(keychainManager: FASDKBuild_ios.FAKeychainManager)
}
@_hasMissingDesignatedInitializers public class FAKeychainManager {
  public static var shared: FASDKBuild_ios.FAKeychainManager
  public func copyCredentials(fromServer: Swift.String, toServer: Swift.String)
  public func registerEphemeralCredentials(forServer: Swift.String)
  @objc deinit
}
public protocol FALoadableSplashView : AnyObject {
  func startLoading()
}
public protocol FAInitialLoadingDelegate : AnyObject {
  func shouldStartLoading()
  func shouldEndLoading()
}
public protocol FAViewComposerDelegate : AnyObject {
  func compose(mail url: Foundation.URL)
  func compose(message url: Foundation.URL)
  func compose(external url: Foundation.URL, preventZooming: Swift.Bool, configuration: WebKit.WKWebViewConfiguration) -> WebKit.WKWebView?
  func compose(safariVC url: Foundation.URL)
  func showFaceIDView(username: Swift.String)
  func hideFaceIDView()
}
public enum FAAuthStatus {
  case loggedIn
  case loggedOut
  case error
  case unknown
  public static func == (a: FASDKBuild_ios.FAAuthStatus, b: FASDKBuild_ios.FAAuthStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class UserDefaultsManager {
  public class func suitedUserDefault() -> Foundation.UserDefaults?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FAStorageManager {
  public static let shared: FASDKBuild_ios.FAStorageManager
  @objc deinit
}
extension FASDKBuild_ios.FAStorageManager {
  public func getStoredCookies() -> [Foundation.HTTPCookie]?
  public func removeStoredCookiesMatching(cookieName: Swift.String? = nil)
  public func applyCookie(cookie: Foundation.HTTPCookie, updateStoredCookies: Swift.Bool = true)
  public func addStoredCookie(cookie: Foundation.HTTPCookie)
}
public protocol FASectionWebViewNavigationDelegate : AnyObject {
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didFinish navigation: WebKit.WKNavigation!)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  func sectionViewControllerShouldReloadPageFollowingProcessTermination(_ controller: FASDKBuild_ios.FASectionViewController) -> Swift.Bool
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didCommit navigation: WebKit.WKNavigation!)
  func sectionViewControllerWebContentPercentageLoadingBeforeShowLoaded(_ controller: FASDKBuild_ios.FASectionViewController)
  func nativeViewController(url: Swift.String, sectionController: FASDKBuild_ios.FASectionViewController) -> UIKit.UIViewController?
  func sectionViewControllerCanEvaluateLoginState(sectionController: FASDKBuild_ios.FASectionViewController) -> Swift.Bool
  @available(iOS 15.0, *)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
  @available(iOS 15.0, *)
  func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, requestDeviceOrientationAndMotionPermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
}
extension FASDKBuild_ios.FASectionWebViewNavigationDelegate {
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  public func sectionViewControllerWebContentPercentageLoadingBeforeShowLoaded(_ controller: FASDKBuild_ios.FASectionViewController)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didFinish navigation: WebKit.WKNavigation!)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  public func sectionViewControllerShouldReloadPageFollowingProcessTermination(_ controller: FASDKBuild_ios.FASectionViewController) -> Swift.Bool
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, didCommit navigation: WebKit.WKNavigation!)
  public func nativeViewController(url: Swift.String, sectionController: FASDKBuild_ios.FASectionViewController) -> UIKit.UIViewController?
  public func sectionViewControllerCanEvaluateLoginState(sectionController: FASDKBuild_ios.FASectionViewController) -> Swift.Bool
  @available(iOS 15.0, *)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
  @available(iOS 15.0, *)
  public func sectionViewController(_ controller: FASDKBuild_ios.FASectionViewController, requestDeviceOrientationAndMotionPermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
}
extension WebKit.WKWebView {
  @_Concurrency.MainActor(unsafe) public func addJavascriptFileInjectionIfNeeded(resource: Swift.String, forMainFrameOnly: Swift.Bool = true, bundle: Foundation.Bundle = Bundle.main)
  @_Concurrency.MainActor(unsafe) public func addJavascriptFileInjection(resource: Swift.String, forMainFrameOnly: Swift.Bool = true, bundle: Foundation.Bundle = Bundle.main)
  @_Concurrency.MainActor(unsafe) public func removeJavascriptFileInjection(resource: Swift.String)
  @_Concurrency.MainActor(unsafe) public func removeAllJavascriptFileInjections(resource: Swift.String)
}
public protocol FAPluginSectionViewControllerLifeCycleDelegate : AnyObject {
  func lifeCycleWebViewWillBeInitialized(sectionViewController: FASDKBuild_ios.FASectionViewController, configuration: WebKit.WKWebViewConfiguration)
  func lifeCycleWebViewInitialized(sectionViewController: FASDKBuild_ios.FASectionViewController)
}
extension FASDKBuild_ios.FAPluginSectionViewControllerLifeCycleDelegate {
  public func lifeCycleWebViewWillBeInitialized(sectionViewController: FASDKBuild_ios.FASectionViewController, configuration: WebKit.WKWebViewConfiguration)
  public func lifeCycleWebViewInitialized(sectionViewController: FASDKBuild_ios.FASectionViewController)
}
@objc @_inheritsConvenienceInitializers public class FALocalAuthManager : ObjectiveC.NSObject {
  public static let shared: FASDKBuild_ios.FALocalAuthManager
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FABaseAppDelegate : ObjectiveC.NSObject, UIKit.UIApplicationDelegate {
  @_Concurrency.MainActor(unsafe) @objc public var window: UIKit.UIWindow?
  @_Concurrency.MainActor(unsafe) open class func appDelegate() -> FASDKBuild_ios.FABaseAppDelegate?
  @_Concurrency.MainActor(unsafe) public var appCoordinator: FASDKBuild_ios.FABaseAppCoordinator!
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func application(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc open func application(_ application: UIKit.UIApplication, continue userActivity: Foundation.NSUserActivity, restorationHandler: @escaping ([any UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func start()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @objc deinit
}
public protocol FAExternalWebViewNavigationDelegate : AnyObject {
  func externalWebView(_ externalWebView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  func externalWebViewDidClose(_ externalWebView: WebKit.WKWebView)
  func externalWebView(_ externalWebView: WebKit.WKWebView, didStartProvisionalNavigation navigation: WebKit.WKNavigation!)
  func externalWebViewInjectLocalJavascriptResources() -> [Swift.String]
  func externalWebViewInjectLocalCSSResources() -> [Swift.String]
}
@_hasMissingDesignatedInitializers open class FAViewPort {
  open class func viewport(forcedWidth: Swift.Int?, userScalable: Swift.Bool) -> FASDKBuild_ios.FAViewPort
  open func content() -> Swift.String
  @objc deinit
}
extension Swift.Error {
  public func isWebKitError() -> Swift.Bool
  public func isANetworkError() -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class FAAnimatableLoadingView : UIKit.UIView, FASDKBuild_ios.FAActivityIndicatable {
  @_Concurrency.MainActor(unsafe) open func startActivityIndicator()
  @_Concurrency.MainActor(unsafe) open func isActivityIndicatorAnimating() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) open func stopActivityIndicator(completion: @escaping (() -> Swift.Void))
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc open class FABaseAppCoordinator : ObjectiveC.NSObject {
  open var window: UIKit.UIWindow
  public init(window: UIKit.UIWindow)
  open func getConfigurationName() -> Swift.String?
  open func getConfigurationJsonObject() -> [Swift.String : Swift.AnyObject]?
  open func getRuntimeStartParameters() -> FASDKBuild_ios.FABuilderRuntimeStartParameters?
  open func getBuilderDelegate() -> (any FASDKBuild_ios.FABuilderDelegate)?
  open func getSectionLifeCycleDelegate() -> (any FASDKBuild_ios.FASectionViewControllerLifeCycleDelegate)?
  open func getSectionWebViewNavigationDelegate() -> (any FASDKBuild_ios.FASectionWebViewNavigationDelegate)?
  open func getSectionUIDelegate() -> (any FASDKBuild_ios.FASectionViewControllerDelegate)?
  open func getExternalWebViewDelegate() -> (any FASDKBuild_ios.FAExternalWebViewNavigationDelegate)?
  open func getInactivityDelegate() -> (any FASDKBuild_ios.FAInactivityTrackerDelegate)?
  open func getDeeplinkDelegate() -> (any FASDKBuild_ios.FADeeplinkDelegate)?
  open func getReachabilityDelegate() -> (any FASDKBuild_ios.FAReachabilityDelegate)?
  open func getKeychainDelegate() -> (any FASDKBuild_ios.FAKeychainDelegate)?
  open func getPlugins() -> [FASDKBuild_ios.FABasePlugin]
  open func start()
  open func setupRootViewController()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FAScreenBuilder {
  @objc deinit
}
@objc public class FAScreenBuilderAction : ObjectiveC.NSObject {
  public init(title: Swift.String, handler: ((FASDKBuild_ios.FAScreenBuilderAction) -> Swift.Void)? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class FATitleMessageButtonViewController : FASDKBuild_ios.FAGeneratedStackViewController {
  @_Concurrency.MainActor(unsafe) public init(title: Swift.String, message: Swift.String, action: FASDKBuild_ios.FAScreenBuilderAction)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var preferredContentSize: CoreFoundation.CGSize {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class FAGeneratedStackViewController : FASDKBuild_ios.FABaseViewController {
  @_Concurrency.MainActor(unsafe) public var backgroundImageView: UIKit.UIImageView!
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func add(title: Swift.String?, insets: UIKit.UIEdgeInsets = UIEdgeInsets(top: 20, left: 36, bottom: 20, right: 36), height: CoreFoundation.CGFloat = 40, font: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 32)) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func add(image: UIKit.UIImage?, insets: UIKit.UIEdgeInsets = UIEdgeInsets(top: 10, left: 36, bottom: 10, right: 36), height: CoreFoundation.CGFloat = 50) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func add(text: Swift.String?, insets: UIKit.UIEdgeInsets = UIEdgeInsets(top: 20, left: 36, bottom: 20, right: 36), font: UIKit.UIFont = UIFont.systemFont(ofSize: 18)) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func addActionButton(action: FASDKBuild_ios.FAScreenBuilderAction, font: UIKit.UIFont = UIFont.boldSystemFont(ofSize: 21), height: CoreFoundation.CGFloat = 50, radius: CoreFoundation.CGFloat = 2, insets: UIKit.UIEdgeInsets = UIEdgeInsets(top: 20, left: 59, bottom: 20, right: 59)) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func findLabel(recursive: Swift.Bool = false) -> UIKit.UILabel?
  @_Concurrency.MainActor(unsafe) public func findButton(recursive: Swift.Bool = false) -> UIKit.UIButton?
}
extension FASDKBuild_ios.FADeepLinkFailedReason : Swift.Equatable {}
extension FASDKBuild_ios.FADeepLinkFailedReason : Swift.Hashable {}
extension FASDKBuild_ios.FADeepLinkFailedReason : Swift.RawRepresentable {}
extension FASDKBuild_ios.FABuildDebugFlag : Swift.Equatable {}
extension FASDKBuild_ios.FABuildDebugFlag : Swift.Hashable {}
extension FASDKBuild_ios.FABuildDebugFlag : Swift.RawRepresentable {}
extension FASDKBuild_ios.FASectionViewControllerType : Swift.Equatable {}
extension FASDKBuild_ios.FASectionViewControllerType : Swift.Hashable {}
extension FASDKBuild_ios.FABuilderState : Swift.Equatable {}
extension FASDKBuild_ios.FABuilderState : Swift.Hashable {}
extension FASDKBuild_ios.FABuilderState : Swift.RawRepresentable {}
extension FASDKBuild_ios.FAAuthStatus : Swift.Equatable {}
extension FASDKBuild_ios.FAAuthStatus : Swift.Hashable {}
